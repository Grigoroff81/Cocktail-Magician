// <auto-generated />
using System;
using CocktailMagician.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CocktailMagicianContext))]
    partial class CocktailMagicianContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Models.Bar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "104 Vitosha blvd.",
                            AverageRating = 0.0,
                            CityId = 1,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 395, DateTimeKind.Utc).AddTicks(755),
                            IsDeleted = false,
                            Name = "Memento",
                            Phone = "0889 555 682"
                        },
                        new
                        {
                            Id = 2,
                            Address = "22 Tsar Ivan Shishman str.",
                            AverageRating = 0.0,
                            CityId = 1,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 395, DateTimeKind.Utc).AddTicks(1612),
                            IsDeleted = false,
                            Name = "Bilkova",
                            Phone = "0898 639 068"
                        },
                        new
                        {
                            Id = 3,
                            Address = "36 Yoakim Gruev str.",
                            AverageRating = 0.0,
                            CityId = 2,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 395, DateTimeKind.Utc).AddTicks(1628),
                            IsDeleted = false,
                            Name = "Petnoto",
                            Phone = "0878 509 703"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Central Beach",
                            AverageRating = 0.0,
                            CityId = 3,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 395, DateTimeKind.Utc).AddTicks(1630),
                            IsDeleted = false,
                            Name = "Cubo",
                            Phone = "0898 425 232"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1 Tsar Peter str.",
                            AverageRating = 0.0,
                            CityId = 4,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 395, DateTimeKind.Utc).AddTicks(1632),
                            IsDeleted = false,
                            Name = "Barcode",
                            Phone = "0895 509 659"
                        },
                        new
                        {
                            Id = 6,
                            Address = "53 Stefan Stambolov blvd.",
                            AverageRating = 0.0,
                            CityId = 4,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 395, DateTimeKind.Utc).AddTicks(1634),
                            IsDeleted = false,
                            Name = "Fabric Club",
                            Phone = "0887 909 019"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.BarsCocktails", b =>
                {
                    b.Property<int>("BarId")
                        .HasColumnType("int");

                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarsCocktails");

                    b.HasData(
                        new
                        {
                            BarId = 1,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 1,
                            CocktailId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 1,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 2,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 2,
                            CocktailId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 2,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 3,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 3,
                            CocktailId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 3,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 4,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 4,
                            CocktailId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 4,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 5,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 5,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 6,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 6,
                            CocktailId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 6,
                            CocktailId = 6,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.BarsUsersReviews", b =>
                {
                    b.Property<int>("BarId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("BarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarsUsersReviews");
                });

            modelBuilder.Entity("CocktailMagician.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(2187),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(2785),
                            IsDeleted = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(2799),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(2801),
                            IsDeleted = false,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.Cocktail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(7617),
                            IsDeleted = false,
                            Name = "Mojito"
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(8137),
                            IsDeleted = false,
                            Name = "Cuba Libre"
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(8154),
                            IsDeleted = false,
                            Name = "Sex on the Beach"
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(8157),
                            IsDeleted = false,
                            Name = "Mai Tai"
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(8159),
                            IsDeleted = false,
                            Name = "Gin Fizz"
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(8161),
                            IsDeleted = false,
                            Name = "Bloody Mary"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.CocktailsUsersReviews", b =>
                {
                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailsUsersReviews");
                });

            modelBuilder.Entity("CocktailMagician.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(4840),
                            IsDeleted = false,
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5342),
                            IsDeleted = false,
                            Name = "Gin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5358),
                            IsDeleted = false,
                            Name = "Rum"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5360),
                            IsDeleted = false,
                            Name = "Soda"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5361),
                            IsDeleted = false,
                            Name = "Coke"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5363),
                            IsDeleted = false,
                            Name = "Lemon juice"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5365),
                            IsDeleted = false,
                            Name = "Sugar"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5366),
                            IsDeleted = false,
                            Name = "Milk"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5368),
                            IsDeleted = false,
                            Name = "Coffee liqueur"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5369),
                            IsDeleted = false,
                            Name = "Orange juice"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5370),
                            IsDeleted = false,
                            Name = "Tomato juice"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5372),
                            IsDeleted = false,
                            Name = "Tabasco"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 394, DateTimeKind.Utc).AddTicks(5373),
                            IsDeleted = false,
                            Name = "Lime"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.IngredientsCocktails", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("IngredientId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("IngredientsCocktails");

                    b.HasData(
                        new
                        {
                            IngredientId = 3,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 4,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 7,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 13,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 1,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 11,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 12,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 3,
                            CocktailId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 5,
                            CocktailId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 13,
                            CocktailId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 1,
                            CocktailId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 10,
                            CocktailId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 3,
                            CocktailId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 6,
                            CocktailId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 6,
                            CocktailId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 2,
                            CocktailId = 5,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4ba90007-95dc-4a4e-8f73-2985c87627f0",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2c295481-d739-4d74-90eb-a7e48d03c1c5",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52fe845e-6aff-4ac4-99f3-d6bfc2274889",
                            CreatedOn = new DateTime(2020, 6, 7, 0, 48, 56, 382, DateTimeKind.Utc).AddTicks(3605),
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED7mR6q15Ac4swnuPXxbPXARUqgwev9RjToBunb86x4yWnP8vf4x58JnliA8ke0SEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "344806a4-9c4e-424e-9117-72d79e6f0568",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8b9988b-4448-4815-ab5a-b41dfbe74734",
                            CreatedOn = new DateTime(2020, 6, 6, 10, 42, 2, 240, DateTimeKind.Utc).AddTicks(5062),
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER@USER.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d52020f-ab35-480d-b991-f1f0bef0c7c5",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Models.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Models.City", "City")
                        .WithMany("Bars")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Models.BarsCocktails", b =>
                {
                    b.HasOne("CocktailMagician.Models.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.Cocktail", "Cocktail")
                        .WithMany("CocktailBars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Models.BarsUsersReviews", b =>
                {
                    b.HasOne("CocktailMagician.Models.Bar", "Bar")
                        .WithMany("BarReviews")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.User", "User")
                        .WithMany("BarReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Models.CocktailsUsersReviews", b =>
                {
                    b.HasOne("CocktailMagician.Models.Cocktail", "Cocktail")
                        .WithMany("Reviews")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.User", "User")
                        .WithMany("CocktailReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Models.IngredientsCocktails", b =>
                {
                    b.HasOne("CocktailMagician.Models.Cocktail", "Cocktail")
                        .WithMany("IngredientsCocktails")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientsCocktails")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
