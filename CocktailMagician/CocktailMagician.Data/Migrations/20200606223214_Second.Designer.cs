// <auto-generated />
using System;
using CocktailMagician.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailMagician.Data.Migrations
{
    [DbContext(typeof(CocktailMagicianContext))]
    [Migration("20200606223214_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailMagician.Models.Bar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "104 Vitosha blvd.",
                            AverageRating = 0.0,
                            CityId = 1,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(9420),
                            IsDeleted = false,
                            Name = "Memento",
                            Phone = "0889 555 682"
                        },
                        new
                        {
                            Id = 2,
                            Address = "22 Tsar Ivan Shishman str.",
                            AverageRating = 0.0,
                            CityId = 1,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 123, DateTimeKind.Utc).AddTicks(280),
                            IsDeleted = false,
                            Name = "Bilkova",
                            Phone = "0898 639 068"
                        },
                        new
                        {
                            Id = 3,
                            Address = "36 Yoakim Gruev str.",
                            AverageRating = 0.0,
                            CityId = 2,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 123, DateTimeKind.Utc).AddTicks(299),
                            IsDeleted = false,
                            Name = "Petnoto",
                            Phone = "0878 509 703"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Central Beach",
                            AverageRating = 0.0,
                            CityId = 3,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 123, DateTimeKind.Utc).AddTicks(301),
                            IsDeleted = false,
                            Name = "Cubo",
                            Phone = "0898 425 232"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1 Tsar Peter str.",
                            AverageRating = 0.0,
                            CityId = 4,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 123, DateTimeKind.Utc).AddTicks(303),
                            IsDeleted = false,
                            Name = "Barcode",
                            Phone = "0895 509 659"
                        },
                        new
                        {
                            Id = 6,
                            Address = "53 Stefan Stambolov blvd.",
                            AverageRating = 0.0,
                            CityId = 4,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 123, DateTimeKind.Utc).AddTicks(305),
                            IsDeleted = false,
                            Name = "Fabric Club",
                            Phone = "0887 909 019"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.BarsCocktails", b =>
                {
                    b.Property<int>("BarId")
                        .HasColumnType("int");

                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarsCocktails");

                    b.HasData(
                        new
                        {
                            BarId = 1,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 1,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 2,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 2,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 3,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 3,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 4,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 4,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 5,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 5,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 6,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BarId = 6,
                            CocktailId = 6,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.BarsUsersReviews", b =>
                {
                    b.Property<int>("BarId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("BarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarsUsersReviews");
                });

            modelBuilder.Entity("CocktailMagician.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(785),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(1417),
                            IsDeleted = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(1429),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(1431),
                            IsDeleted = false,
                            Name = "Burgas"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.Cocktail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(6485),
                            IsDeleted = false,
                            Name = "Mojito"
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(7008),
                            IsDeleted = false,
                            Name = "Cuba Libre"
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(7025),
                            IsDeleted = false,
                            Name = "Sex on the Beach"
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(7028),
                            IsDeleted = false,
                            Name = "Mai Tai"
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(7030),
                            IsDeleted = false,
                            Name = "Gin Fizz"
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 0.0,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(7032),
                            IsDeleted = false,
                            Name = "Bloody Mary"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.CocktailsUsersReviews", b =>
                {
                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CocktailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailsUsersReviews");
                });

            modelBuilder.Entity("CocktailMagician.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(3561),
                            IsDeleted = false,
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4067),
                            IsDeleted = false,
                            Name = "Gin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4089),
                            IsDeleted = false,
                            Name = "Rum"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4091),
                            IsDeleted = false,
                            Name = "Soda"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4093),
                            IsDeleted = false,
                            Name = "Coke"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4094),
                            IsDeleted = false,
                            Name = "Lemon juice"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4095),
                            IsDeleted = false,
                            Name = "Sugar"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4097),
                            IsDeleted = false,
                            Name = "Milk"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4099),
                            IsDeleted = false,
                            Name = "Coffee liqueur"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4100),
                            IsDeleted = false,
                            Name = "Orange juice"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4101),
                            IsDeleted = false,
                            Name = "Tomato juice"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4103),
                            IsDeleted = false,
                            Name = "Tabasco"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 122, DateTimeKind.Utc).AddTicks(4104),
                            IsDeleted = false,
                            Name = "Lime"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.IngredientsCocktails", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("IngredientId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("IngredientsCocktails");

                    b.HasData(
                        new
                        {
                            IngredientId = 3,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 4,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 7,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 13,
                            CocktailId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 1,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 11,
                            CocktailId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            IngredientId = 12,
                            CocktailId = 6,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "72802b88-9b15-4b81-9948-2eb26f7bfaf0",
                            Name = "member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "bf807891-bb96-48c8-9602-7c828b35f334",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("CocktailMagician.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32f1b34c-2bc2-418c-bae0-f929d4970d59",
                            CreatedOn = new DateTime(2020, 6, 6, 22, 32, 14, 109, DateTimeKind.Utc).AddTicks(485),
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJBjesMr0yCptsJlCRzlGHdvVmXsqmDl2kOl7GaKJkHaILwkNyhTYFiNkxAVB6JjrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cb66a29-9664-4fc7-a595-51513b31ee08",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailMagician.Models.Bar", b =>
                {
                    b.HasOne("CocktailMagician.Models.City", "City")
                        .WithMany("Bars")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Models.BarsCocktails", b =>
                {
                    b.HasOne("CocktailMagician.Models.Bar", "Bar")
                        .WithMany("BarCocktails")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.Cocktail", "Cocktail")
                        .WithMany("CocktailBars")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Models.BarsUsersReviews", b =>
                {
                    b.HasOne("CocktailMagician.Models.Bar", "Bar")
                        .WithMany("BarReviews")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.User", "User")
                        .WithMany("BarReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Models.CocktailsUsersReviews", b =>
                {
                    b.HasOne("CocktailMagician.Models.Cocktail", "Cocktail")
                        .WithMany("Reviews")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.User", "User")
                        .WithMany("CocktailReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailMagician.Models.IngredientsCocktails", b =>
                {
                    b.HasOne("CocktailMagician.Models.Cocktail", "Cocktail")
                        .WithMany("IngredientsCocktails")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientsCocktails")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailMagician.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CocktailMagician.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
